pipeline {
    agent any
        options {
            skipDefaultCheckout(true)
        }
    environment {
        DOCKER_IMAGE = "flask-app"
        DOCKER_TAG = "${BUILD_NUMBER}"
        REGISTRY = "docker.io/exact84"
        SONAR_SCANNER_HOME = tool 'SonarScanner'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'task_6', credentialsId: 'github-token', url: 'https://github.com/exact84/rsschool-devops-course-tasks.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG .'
            }
        }

        stage('Test') {
            steps {
                sh 'pip install -r requirements.txt'
                sh 'pytest || exit 1'
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('flask-app-exact')
            }
            steps {
                withSonarQubeEnv('MySonarQube') {
                    withCredentials([string(credentialsId: 'flask-app-exact', variable: 'SONAR_TOKEN')]) {
                        sh '''
                        ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.login=$SONAR_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push $REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                helm upgrade --install myapp . --namespace default \
                    --set image.repository=$REGISTRY/$DOCKER_IMAGE \
                    --set image.tag=$DOCKER_TAG
                '''
            }
        }

        stage('Smoke Test') {
            steps {
                sh '''
                sleep 10
                kubectl rollout status deployment/flask-app-helm
                curl --fail http://$(minikube ip):30202 || echo "App is not reachable"
                '''
            }
        }
    }

    post {
        success {
            emailext(
                to: 'exact84@gmail.com',
                subject: "Jenkins build #${BUILD_NUMBER} succeeded",
                body: "Everything deployed and verified successfully."
            )
        }
        failure {
            emailext(
                to: 'exact84@gmail.com',
                subject: "Jenkins build #${BUILD_NUMBER} failed",
                body: "Please check the Jenkins console log for details."
            )
        }
    }
}
